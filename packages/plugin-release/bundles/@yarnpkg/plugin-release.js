/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-release",
factory: function (require) {
var plugin;plugin=(()=>{"use strict";var e={170:(e,t,r)=>{r.r(t),r.d(t,{default:()=>p});function o(e,t,r,o){var n,a=arguments.length,i=a<3?t:null===o?o=Object.getOwnPropertyDescriptor(t,r):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,r,o);else for(var c=e.length-1;c>=0;c--)(n=e[c])&&(i=(a<3?n(i):a>3?n(t,r,i):n(t,r))||i);return a>3&&i&&Object.defineProperty(t,r,i),i}Object.create;Object.create;const n=require("@yarnpkg/core"),a=require("@yarnpkg/cli"),i=require("@yarnpkg/plugin-version/lib/versionUtils");var c=r.n(i);const s=require("clipanion");class l extends s.Command{constructor(){super(...arguments),this.json=!1,this.all=!1}async execute(){const e=await n.Configuration.find(this.context.cwd,this.context.plugins),{project:t,workspace:r}=await n.Project.find(e,this.context.cwd);if(!r)throw new a.WorkspaceRequiredError(t.cwd,this.context.cwd);const o=await c().resolveVersionFiles(t);return console.dir(o),0}}l.usage=s.Command.Usage({description:"",details:"",examples:[["",""]]}),o([s.Command.Boolean("--json")],l.prototype,"json",void 0),o([s.Command.Boolean("--all",{description:"Apply the deferred version changes on all workspaces"})],l.prototype,"all",void 0),o([s.Command.Path("release","tags")],l.prototype,"execute",null);const p={commands:[l]}}},t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}return r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(170)})();
return plugin;
}
};